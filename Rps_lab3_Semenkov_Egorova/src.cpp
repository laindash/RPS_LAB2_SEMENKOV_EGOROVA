/*
************************************************************************************************************************
*					Семенков Даниил Ильич && Егорова Ксения Олеговна|Группа 425|Вариант 6|                             *
************************************************************************************************************************
												Лабораторная работа № 3
									-----------------------------------------------
	Тема: «Изучение реализации графических пользовательских интерфейсов и интеграции базы данных для веб-приложений»
	Цель работы: разработка для программы графического пользовательского интерфейса и интеграция базы данных для веб-приложений.

1. Для проекта, созданного в рамках 2 лабораторной, в выбранной системе контроля версий создать новую ветку (branch). 
Все дальнейшие модификации должны вноситься исключительно в созданную ветку, исходная ветка со 2 лабораторной не
должна быть изменена. Каждый участник учебной группы в рамках работы над лабораторной должен внести хотя бы одно изменение в проект.

2. Реализовать 5 программных тестов работы с базой данных: 
 1) тест добавления 100 массивов в базу данных программы (размер и наполнение массивов генерируется случайным образом), 
 который в качестве ответа выводит флаг успешного / неуспешного выполнения и время работы;
 2) тест добавления 1000 массивов в базу данных программы (размер и наполнение массивов генерируется случайным образом), 
 который в качестве ответа выводит флаг успешного / неуспешного выполнения и время работы; 
 3) тест добавления 10000 массивов в базу данных программы (размер и наполнение массивов генерируется случайным образом),
который в качестве ответа выводит флаг успешного / неуспешного выполнения и время работы; 
 4) тест выгрузки и сортировки 100 случайных массивов из базы данных, который в качестве ответа выводит флаг успешного / не успешного
выполнения, общее время работы теста и среднее время работы с 1 массивом (данный тест должен быть запущен 3 раза для базы на 100, 1000 и 10000 записей);
 5) тест очистки базы данных, который в качестве ответа выводит флаг успешного / не успешного выполнения и общее время работы теста 
 (данный тест должен быть запущен 3 раза для базы на 100, 1000 и 10000 записей). 
 Тесты должны обращаться к программным функциям создаваемой программы, но не должны быть частью самой программы.

3. Для программы, реализованной в рамках 2 лабораторной, создать серверную оболочку. 
Язык программирования серверной оболочки может отличаться от языка, использованного во 2 лабораторной. 
К примеру, если алгоритм был реализован на С++, то его можно использовать в качестве библиотеки при работе в python или java.

4. Развернуть базу данных (любую на выбор, в том числе можно использовать в качестве базы данных текстовый файл, SQL или NoSQL СУБД). 
Создать структуру базы данных, реализующую хранение массив (как отсортированных, так и не отсортированных). 
Протестировать работу базы с помощью тестов, написанных в предыдущем пункте. Результаты тестирования записать в отчёт.

5. Реализовать графический пользовательский веб-интерфейс (стек технологий любой на выбор, в том числе можно использовать конструкторы сайтов). 
Интерфейс должен иметь функции: 
1) ввода/редактирования массива для сортировки с клавиатуры; 
2) сохранение выведенного в интерфейсе массива в базу данных; 
3) вывод списка всех массивов хранящихся в базе (без возможности редактирования и сортировка); 
4) выгрузка массива из базы для редактирования и сортировка; 
5) сортировка массива по алгоритму реализованному во 2 лабораторной.
Получившийся интерфейс должен хотя бы отчасти соответствовать следующий эвристикам ui / ux : видимость статуса системы; 
соответствие между системой и реальным миром; управляемость; согласованность; гибкость; минимализм в дизайне; помощь пользователю в выявлении ошибок; наличие справки. 
В отчёте должны быть даны пояснения, какие элементы графического интерфейса какой эвристике соответствуют.

6. Написать отчёт, в котором представить результат работы программы и все необходимые пояснения, указанные в предыдущих пунктах работы.
-----------------------------------------------------------------------------------------------------------------------
*/

#include <cstdlib> // Включение заголовочного файла для стандартных функций C, таких как srand
#include <ctime> // Включение заголовочного файла для работы с временем (для инициализации генератора случайных чисел)
#include <iostream>
#include <Windows.h> // Для кодировки
#include <QtWidgets/QApplication>
#include "main_window.h"
#include "database.h"


int main(int argc, char* argv[]) {
	// Установка кодировки ввода-вывода UTF-8, для поддержки кириллицы (универсальный вариант)
	setlocale(LC_ALL, ".UTF8");

	/* Установка начального значения для генератора псевдослучайных чисел, с использованием текущего времени,
	для обеспечения различных последовательностей при каждом запуске программы */
	srand(static_cast<unsigned int>(time(nullptr)));

	// Создание объекта приложения
	QApplication a(argc, argv);
	// Создание объекта главной графической формы
	MainWindow w;

	// Вывод графической формы
	w.show();

	return a.exec();
}
